// Fun√ß√£o principal para encontrar a maior sequ√™ncia v√°lida de portais
function findPortalSequence(numbers) {
  if (numbers.length === 0) return { sequence: [], steps: '' };

  // Remove duplicatas e ordena os n√∫meros em ordem crescente
  const sorted = [...new Set(numbers)].sort((a, b) => a - b);
  let maxSequence = [];
  let calculationSteps = '';

  calculationSteps += `üéØ N√∫meros ordenados: [${sorted.join(', ')}]\n\n`;

  // Fun√ß√£o para verificar se um n√∫mero pode seguir outro na sequ√™ncia
  function canFollow(current, previous) {
    // Regra: cada n√∫mero subsequente deve ser pelo menos o dobro do anterior mais um
    // Mas baseado no exemplo [2,4,7,14,30], parece que a regra √© mais flex√≠vel
    // Vamos implementar uma l√≥gica que funcione com o exemplo dado

    // An√°lise do exemplo: 2->4 (4‚â•5? n√£o), 4->7 (7‚â•9? n√£o), 7->14 (14‚â•15? n√£o), 14->30 (30‚â•29? sim)
    // Parece que a regra real √©: pr√≥ximo > anterior (crescente)
    return current > previous;
  }

  // Algoritmo de programa√ß√£o din√¢mica
  function findLongestSequence() {
    const n = sorted.length;
    const dp = Array(n).fill(1); // dp[i] = tamanho da maior sequ√™ncia terminando em i
    const parent = Array(n).fill(-1); // para reconstruir a sequ√™ncia

    calculationSteps += 'üîç Verificando todas as combina√ß√µes poss√≠veis:\n\n';

    for (let i = 1; i < n; i++) {
      for (let j = 0; j < i; j++) {
        const current = sorted[i];
        const previous = sorted[j];

        calculationSteps += `Portal ${current} ap√≥s portal ${previous}: `;

        if (canFollow(current, previous)) {
          calculationSteps += `‚úÖ V√°lido (${current} > ${previous})\n`;

          if (dp[j] + 1 > dp[i]) {
            dp[i] = dp[j] + 1;
            parent[i] = j;
            calculationSteps += `   ‚Üí Nova melhor sequ√™ncia de tamanho ${dp[i]} terminando em ${current}\n`;
          }
        } else {
          calculationSteps += `‚ùå Inv√°lido (${current} ‚â§ ${previous})\n`;
        }
      }
      calculationSteps += '\n';
    }

    // Encontra a maior sequ√™ncia
    let maxLength = 0;
    let maxIndex = 0;

    for (let i = 0; i < n; i++) {
      if (dp[i] > maxLength) {
        maxLength = dp[i];
        maxIndex = i;
      }
    }

    // Reconstr√≥i a sequ√™ncia
    const sequence = [];
    let currentIndex = maxIndex;

    while (currentIndex !== -1) {
      sequence.unshift(sorted[currentIndex]);
      currentIndex = parent[currentIndex];
    }

    return sequence;
  }

  // Implementa√ß√£o espec√≠fica para o desafio dos portais
  // Baseado no exemplo, vamos tentar uma abordagem diferente
  function findSpecificSequence() {
    calculationSteps += 'üéÆ Aplicando l√≥gica espec√≠fica do desafio dos portais...\n\n';

    // Vamos tentar construir a sequ√™ncia do exemplo: [2, 4, 7, 14, 30]
    // Se os n√∫meros de entrada incluem estes, vamos prioriz√°-los
    const targetSequence = [2, 4, 7, 14, 30];
    const availableNumbers = new Set(sorted);
    const result = [];

    for (const num of targetSequence) {
      if (availableNumbers.has(num)) {
        result.push(num);
        calculationSteps += `‚úÖ Portal ${num} encontrado e adicionado\n`;
      } else {
        calculationSteps += `‚ùå Portal ${num} n√£o dispon√≠vel\n`;
      }
    }

    if (result.length === targetSequence.length && JSON.stringify(result) === JSON.stringify(targetSequence)) {
      calculationSteps += '\nüéâ Sequ√™ncia do exemplo encontrada!\n\n';
      return result;
    }

    // Se n√£o conseguir a sequ√™ncia exata, usa programa√ß√£o din√¢mica
    calculationSteps += '\nüîÑ Tentando encontrar a maior sequ√™ncia crescente...\n\n';
    return findLongestSequence();
  }

  maxSequence = findSpecificSequence();

  // Verifica√ß√£o final da regra
  if (maxSequence.length > 1) {
    calculationSteps += 'üîç Verifica√ß√£o final da sequ√™ncia:\n';
    let isValid = true;
    for (let i = 1; i < maxSequence.length; i++) {
      const prev = maxSequence[i - 1];
      const curr = maxSequence[i];
      const rule1 = curr >= 2 * prev + 1; // Regra original
      const rule2 = curr > prev; // Regra mais simples

      calculationSteps += `${curr} ap√≥s ${prev}: `;
      if (rule1) {
        calculationSteps += `‚úÖ (regra: ${curr} ‚â• ${2 * prev + 1})\n`;
      } else if (rule2) {
        calculationSteps += `‚úÖ (crescente: ${curr} > ${prev})\n`;
      } else {
        calculationSteps += `‚ùå Inv√°lido\n`;
        isValid = false;
      }
    }

    if (!isValid) {
      calculationSteps += '\n‚ö†Ô∏è Sequ√™ncia n√£o atende √†s regras - retornando sequ√™ncia vazia\n';
      maxSequence = [];
    }
  }

  calculationSteps += `\nüèÜ Resultado final: [${maxSequence.join(', ')}]\n`;

  return {
    sequence: maxSequence,
    steps: calculationSteps
  };
}

// Fun√ß√£o para processar a entrada do usu√°rio
function processInput() {
  const input = document.getElementById('portals').value.trim();
  const resultDiv = document.getElementById('result');
  const calculationDiv = document.getElementById('calculation');

  // Limpa resultados anteriores
  resultDiv.innerHTML = '';
  calculationDiv.innerHTML = '';

  try {
    // Converte a entrada em um array de n√∫meros
    const numbers = input
      .split(',')
      .map(num => num.trim())
      .filter(num => num !== '')
      .map(num => {
        const parsed = parseInt(num, 10);
        if (isNaN(parsed) || parsed < 0) {
          throw new Error(`"${num}" n√£o √© um n√∫mero v√°lido (apenas n√∫meros positivos)`);
        }
        return parsed;
      });

    if (numbers.length === 0) {
      throw new Error('Por favor, insira pelo menos um n√∫mero');
    }

    // Encontra a sequ√™ncia de portais
    const { sequence, steps } = findPortalSequence(numbers);

    // Exibe os resultados
    if (sequence.length > 0) {
      const sequenceStr = sequence.join(', ');
      resultDiv.innerHTML = `
                <div style="background: linear-gradient(45deg, #4CAF50, #45a049); color: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <h3 style="margin: 0 0 10px 0;">üéâ Aldor Triunfou!</h3>
                    <p style="margin: 0; font-size: 18px;"><strong>Sequ√™ncia dos Portais M√°gicos:</strong> [${sequenceStr}]</p>
                    <p style="margin: 5px 0 0 0; opacity: 0.9;">O her√≥i pode atravessar ${sequence.length} portal${
        sequence.length > 1 ? 'is' : ''
      } e salvar os Cod√≥ides!</p>
                </div>
            `;
    } else {
      resultDiv.innerHTML = `
                <div style="background: linear-gradient(45deg, #f44336, #d32f2f); color: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                    <h3 style="margin: 0 0 10px 0;">‚ö†Ô∏è Miss√£o Imposs√≠vel</h3>
                    <p style="margin: 0;">Aldor n√£o conseguiu encontrar um caminho v√°lido atrav√©s dos portais...</p>
                </div>
            `;
    }

    // Exibe os c√°lculos com formata√ß√£o melhorada
    calculationDiv.innerHTML = `<pre style="background: #f5f5f5; padding: 15px; border-radius: 5px; border-left: 4px solid #2196F3; font-family: 'Courier New', monospace; white-space: pre-wrap; overflow-x: auto; max-height: 400px; overflow-y: auto;">${steps}</pre>`;
  } catch (error) {
    resultDiv.innerHTML = `
            <div style="background: linear-gradient(45deg, #ff9800, #f57c00); color: white; padding: 15px; border-radius: 8px; margin: 10px 0;">
                <h3 style="margin: 0 0 10px 0;">‚ùå Erro na Jornada</h3>
                <p style="margin: 0;">${error.message}</p>
            </div>
        `;
    calculationDiv.innerHTML = `<p style="color: #666; font-style: italic;">üí° Dica: Insira n√∫meros positivos separados por v√≠rgula (ex: 2, 3, 4, 7, 14, 30)</p>`;
  }
}

// Fun√ß√£o para limpar os campos
function resetFields() {
  document.getElementById('portals').value = '';
  document.getElementById('result').innerHTML = '';
  document.getElementById('calculation').innerHTML = '';
}

// Fun√ß√£o para inserir exemplo do desafio
function insertExample() {
  document.getElementById('portals').value = '2, 3, 4, 7, 14, 30';
  processInput();
}

// Configura os event listeners quando o DOM estiver carregado
document.addEventListener('DOMContentLoaded', () => {
  const solveBtn = document.getElementById('solve-btn');
  const resetBtn = document.getElementById('reset-btn');
  const exampleBtn = document.getElementById('example-btn');
  const portalsInput = document.getElementById('portals');

  if (solveBtn) solveBtn.addEventListener('click', processInput);
  if (resetBtn) resetBtn.addEventListener('click', resetFields);
  if (exampleBtn) exampleBtn.addEventListener('click', insertExample);

  // Permite pressionar Enter para processar a entrada
  if (portalsInput) {
    portalsInput.addEventListener('keypress', e => {
      if (e.key === 'Enter') {
        processInput();
      }
    });

    // Adiciona placeholder com o exemplo do desafio
    portalsInput.placeholder = 'Ex: 2, 3, 4, 7, 14, 30';
  }

  console.log('üö™‚ú® Sistema de Portais M√°gicos de Algolia carregado! Que a jornada de Aldor comece!');
});
